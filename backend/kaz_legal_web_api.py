# kaz_legal_web_api.py (–í–µ—Ä—Å–∏—è 4.0 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –∏ –ø–æ–ª–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
from flask import Flask, request, jsonify, Response, stream_with_context, send_from_directory
import google.generativeai as genai
import os
import json
import re
from flask_cors import CORS

app = Flask(__name__, static_folder='../frontend', static_url_path='')
CORS(app, origins=["https://ai-lawyer-tau.vercel.app"])

# üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

LAW_DB = [] 

# --- –£–õ–£–ß–®–ï–ù–ò–ï: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ ---
LEGAL_SYNONYMS = {
    # –¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ': ['—É–≤–æ–ª–µ–Ω', '—É–≤–æ–ª—å–Ω', '—É–≤–æ–ª–∏—Ç—å', '—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ', '—Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å', '—Ä–∞—Å—Ç–æ—Ä–∂', '–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ', '–ø—Ä–µ–∫—Ä–∞—â', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ', '–æ—Å–≤–æ–±–æ–∂–¥', '–æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ', '–æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω', '—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ', '—Å–æ–∫—Ä–∞—â–µ–Ω', '—Å–æ–∫—Ä–∞—â', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–µ', '–≤–∑—ã—Å–∫–∞–Ω–∏–µ'],
    '–∑–∞—Ä–ø–ª–∞—Ç–∞': ['–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è', '–∑–∞—Ä–ø–ª–∞—Ç', '–æ–ø–ª–∞—Ç–∞', '–æ–∫–ª–∞–¥', '–≤—ã–ø–ª–∞—Ç–∞', '–≤—ã–ø–ª–∞—Ç', '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω', '–∂–∞–ª–æ–≤–∞–Ω–∏–µ', '–∂–∞–ª–æ–≤–∞–Ω', '–¥–æ—Ö–æ–¥', '–ø–æ–ª—É—á–∫–∞', '–ø—Ä–µ–º–∏—è', '–ø—Ä–µ–º–∏–∞–ª—å–Ω', '–Ω–∞–¥–±–∞–≤–∫–∞', '–Ω–∞–¥–±–∞–≤–∫', '—Ç–∞—Ä–∏—Ñ'],
    '–æ—Ç–ø—É—Å–∫': ['–æ—Ç–ø—É—Å–∫', '–æ—Ç–¥—ã—Ö', '–∫–∞–Ω–∏–∫—É–ª—ã', '–≤—ã—Ö–æ–¥–Ω–æ–π', '–≤—ã—Ö–æ–¥–Ω', '–ø–µ—Ä–µ—Ä—ã–≤', '–æ—Ç–≥—É–ª', '–Ω–µ—Ä–∞–±–æ—á–∏–π'],
    '–±–æ–ª—å–Ω–∏—á–Ω—ã–π': ['–±–æ–ª—å–Ω–∏—á–Ω', '–Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', '–Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω', '–±–æ–ª–µ–∑–Ω—å', '–ª–µ—á–µ–Ω–∏–µ', '–ª–µ—á–µ–Ω', '–ª–∏—Å—Ç–æ–∫', '–≤—Ä–µ–º–µ–Ω–Ω–∞—è', '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å', '–∏–Ω–≤–∞–ª–∏–¥–Ω'],
    '—Ä–∞–±–æ—Ç–∞': ['—Ç—Ä—É–¥', '—Ä–∞–±–æ—Ç', '—Å–ª—É–∂–±–∞', '—Å–ª—É–∂–±', '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç', '–∑–∞–Ω—è—Ç–æ—Å—Ç—å', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω', '–¥–æ–ª–∂–Ω–æ—Å—Ç—å', '–¥–æ–ª–∂–Ω–æ—Å—Ç', '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏'],
    '—Ä–∞–±–æ—Ç–Ω–∏–∫': ['—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—Å–ª—É–∂–∞—â–∏–π', '—Å–ª—É–∂–∞—â', '–ø–µ—Ä—Å–æ–Ω–∞–ª', '–∫–∞–¥—Ä—ã', '–∫–∞–¥—Ä', '—Ç—Ä—É–¥—è—â–∏–π—Å—è', '—Ç—Ä—É–¥—è—â', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'],
    '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å': ['–Ω–∞–Ω–∏–º–∞—Ç–µ–ª—å', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü', '–∫–æ–º–ø–∞–Ω–∏—è', '—Ñ–∏—Ä–º–∞', '—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ'],
    
    # –ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ
    '–∂–∏–ª—å–µ': ['–∂–∏–ª–∏—â–µ', '–∂–∏–ª–∏—â', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–≤–∞—Ä—Ç–∏—Ä', '–¥–æ–º', '–ø–æ–º–µ—â–µ–Ω–∏–µ', '–ø–æ–º–µ—â–µ–Ω', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–Ω–µ–¥–≤–∏–∂–∏–º', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç', '–≤–ª–∞–¥–µ–Ω–∏–µ', '–≤–ª–∞–¥–µ–Ω', '–∂–∏–ª–ø–ª–æ—â–∞–¥—å'],
    '–∞—Ä–µ–Ω–¥–∞': ['–∞—Ä–µ–Ω–¥', '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å', '–Ω–∞–π–º', '–Ω–∞–µ–º', '—Å—ä–µ–º', '—Å–Ω–∏–º–∞—Ç—å', '–ø–æ–¥–Ω–∞–µ–º', '–¥–æ–≥–æ–≤–æ—Ä', '–ø–ª–∞—Ç–∞', '–∞—Ä–µ–Ω–¥–Ω–∞—è'],
    '–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞': ['–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', '–∫–æ–º–º—É–Ω–∞–ª–∫', '—É—Å–ª—É–≥–∏', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', '—Å–æ–¥–µ—Ä–∂–∞–Ω', '—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è', '—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü', '—Ä–µ–º–æ–Ω—Ç', '–ö–£'],
    '–≤—ã—Å–µ–ª–µ–Ω–∏–µ': ['–≤—ã—Å–µ–ª–µ–Ω', '–≤—ã—Å–µ–ª–∏—Ç—å', '–∏–∑—ä—è—Ç–∏–µ', '–∏–∑—ä—è—Ç', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω', '–≤—ã–¥–≤–æ—Ä–µ–Ω–∏–µ', '–≤—ã–¥–≤–æ—Ä–µ–Ω'],

    # –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ
    '–ø–æ—Å–æ–±–∏–µ': ['–ø–æ—Å–æ–±–∏', '–≤—ã–ø–ª–∞—Ç–∞', '–≤—ã–ø–ª–∞—Ç', '—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ', '—Å–æ—Ü–∏–∞–ª—å–Ω', '–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–¥–¥–µ—Ä–∂–∫', '–ª—å–≥–æ—Ç–∞', '–ª—å–≥–æ—Ç', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü', '—Å—É–±—Å–∏–¥–∏—è'],
    '–ø–µ–Ω—Å–∏—è': ['–ø–µ–Ω—Å–∏–æ–Ω', '–ø–µ–Ω—Å–∏–æ–Ω–Ω–æ–µ', '–≤—ã—Å–ª—É–≥–∞', '—Å—Ç–∞—Ä–æ—Å—Ç—å', '–ø–æ —Å—Ç–∞—Ä–æ—Å—Ç–∏', '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å', '–∏–Ω–≤–∞–ª–∏–¥–Ω', '–ø–æ—Ç–µ—Ä—è –∫–æ—Ä–º–∏–ª—å—Ü–∞', '–∫–æ—Ä–º–∏–ª–µ—Ü'],
    '–¥–µ–∫—Ä–µ—Ç': ['–¥–µ–∫—Ä–µ—Ç–Ω', '–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ', '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫', '–æ—Ç—Ü–æ–≤—Å—Ç–≤–æ', '–æ—Ç—Ü–æ–≤—Å–∫', '—Ä–µ–±–µ–Ω–æ–∫', '—Ä–æ–∂–¥–µ–Ω–∏–µ', '—Ä–æ–∂–¥–µ–Ω', '—É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ', '—É—Å—ã–Ω–æ–≤–ª–µ–Ω', '–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å', '–±–µ—Ä–µ–º–µ–Ω'],
    '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å': ['–∏–Ω–≤–∞–ª–∏–¥', '–∏–Ω–≤–∞–ª–∏–¥–Ω', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '–≥—Ä—É–ø–ø–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è', '—Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü'],

    # –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ
    '–¥–æ–≥–æ–≤–æ—Ä': ['—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', '—Å–æ–≥–ª–∞—à–µ–Ω', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '—Å–¥–µ–ª–∫–∞', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤', '—É—Å–ª–æ–≤–∏–µ', '—É—Å–ª–æ–≤–∏—è', '–ø–∞–∫—Ç', '–¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'],
    '–¥–æ–ª–≥': ['–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', '–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤', '–∑–∞–µ–º', '–∑–∞–π–º', '–∫—Ä–µ–¥–∏—Ç', '–≤–∑—ã—Å–∫–∞–Ω–∏–µ', '–≤–∑—ã—Å–∫–∞–Ω', '–Ω–µ—É–ø–ª–∞—Ç–∞'],
    '–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ': ['–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω', '–∑–∞–≤–µ—â–∞–Ω–∏–µ', '–∑–∞–≤–µ—â–∞–Ω', '–Ω–∞—Å–ª–µ–¥–Ω–∏–∫', '–∏–º—É—â–µ—Å—Ç–≤–æ', '–∏–º—É—â–µ—Å—Ç–≤', '–ø—Ä–∞–≤–æ–ø—Ä–µ–µ–º—Å—Ç–≤–æ'],
    '—Ä–∞–∑–≤–æ–¥': ['—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ', '—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω', '–±—Ä–∞–∫', '—Å—É–ø—Ä—É–≥', '—Å—É–ø—Ä—É–≥–∞', '—Å–µ–º–µ–π–Ω—ã–π', '—Å–µ–º–µ–π–Ω', '–∞–ª–∏–º–µ–Ω—Ç—ã', '—Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞'],

    # –£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ
    '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ': ['–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω', '—É–≥–æ–ª–æ–≤–Ω–æ–µ', '—É–≥–æ–ª–æ–≤–Ω', '–ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω', '–¥–µ—è–Ω–∏–µ', '–¥–µ—è–Ω', '—Å–æ—Å—Ç–∞–≤', '–≤–∏–Ω–∞', '–Ω–∞–∫–∞–∑–∞–Ω–∏–µ', '–Ω–∞–∫–∞–∑–∞–Ω', '–∑–ª–æ–¥–µ—è–Ω–∏–µ', '–ø—Ä–æ—Å—Ç—É–ø–æ–∫'],
    '–∫—Ä–∞–∂–∞': ['–∫—Ä–∞–∂', '—Ö–∏—â–µ–Ω–∏–µ', '—Ö–∏—â–µ–Ω', '–ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ', '–ø—Ä–∏—Å–≤–æ–µ–Ω', '—Ä–∞—Å—Ç—Ä–∞—Ç–∞', '—Ä–∞—Å—Ç—Ä–∞—Ç', '–≥—Ä–∞–±–µ–∂', '—Ä–∞–∑–±–æ–π'],
    '–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ': ['–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤', '–æ–±–º–∞–Ω', '–∞—Ñ–µ—Ä–∞', '–∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', '–∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª', '—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞'],
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ
    '—à—Ç—Ä–∞—Ñ': ['–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω', '–≤–∑—ã—Å–∫–∞–Ω–∏–µ', '–≤–∑—ã—Å–∫–∞–Ω', '–Ω–∞–∫–∞–∑–∞–Ω–∏–µ', '–Ω–∞–∫–∞–∑–∞–Ω', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–Ω–∞—Ä—É—à–µ–Ω', '—Å–∞–Ω–∫—Ü–∏—è', '—Å–∞–Ω–∫—Ü–∏', '–ø—Ä–æ—Ç–æ–∫–æ–ª'],
    '–ø—Ä–∞–≤–∞': ['–ø—Ä–∞–≤–æ', '–ø—Ä–∞–≤–æ–º–æ—á–∏–µ', '–ø–æ–ª–Ω–æ–º–æ—á–∏–µ', '—Å–≤–æ–±–æ–¥–∞', '—Å–≤–æ–±–æ–¥', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '–≥–∞—Ä–∞–Ω—Ç', '–∑–∞—â–∏—Ç–∞', '–∑–∞—â–∏—Ç', '–∏–Ω—Ç–µ—Ä–µ—Å—ã'],

    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π
    '—É—á–∏—Ç–µ–ª—å': ['—É—á–∏—Ç–µ–ª', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ø—Ä–µ–ø–æ–¥–∞', '–ø–µ–¥–∞–≥–æ–≥', '–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫', '–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å'],
    '—É—á–µ–Ω–∏–∫': ['—É—á–µ–Ω–∏–∫', '—É—á–∞—â–∏–π—Å—è', '—É—á–∞—â', '—à–∫–æ–ª—å–Ω–∏–∫', '—à–∫–æ–ª—å–Ω', '—Å—Ç—É–¥–µ–Ω—Ç', '–≤–æ—Å–ø–∏—Ç–∞–Ω–Ω–∏–∫', '–≤–æ—Å–ø–∏—Ç–∞–Ω', '–æ–±—É—á–∞—é—â–∏–π—Å—è'],
    '—à–∫–æ–ª–∞': ['—à–∫–æ–ª', '—É—á–∏–ª–∏—â–µ', '–ª–∏—Ü–µ–π', '–≥–∏–º–Ω–∞–∑–∏—è', '–∫–æ–ª–ª–µ–¥–∂', '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ', '–æ–±—Ä–∞–∑–æ–≤–∞—Ç', '—É—á–µ–±–Ω–æ–µ', '—É—á–µ–±–Ω', '–∑–∞–≤–µ–¥–µ–Ω–∏–µ'],
    '—Ä–µ–±–µ–Ω–æ–∫': ['—Ä–µ–±–µ–Ω', '–¥–µ—Ç–∏', '–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π', '–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç', '–º–∞–ª–æ–ª–µ—Ç–Ω–∏–π', '–º–∞–ª–æ–ª–µ—Ç', '–¥–∏—Ç—è', '–ø–æ–¥—Ä–æ—Å—Ç–æ–∫', '–ø–æ–¥—Ä–æ—Å—Ç'],
    '–Ω–∞—Å–∏–ª–∏–µ': ['–Ω–∞—Å–∏–ª–∏', '–∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å', '–∂–µ—Å—Ç–æ–∫', '–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ', '–ø—Ä–∏–Ω—É–∂–¥–µ–Ω', '–∞–≥—Ä–µ—Å—Å–∏—è', '–∞–≥—Ä–µ—Å—Å–∏', '–∏–∑–±–∏–µ–Ω–∏–µ', '–∏–∑–±–∏–µ–Ω', '–¥–æ–º–∞—à–Ω–µ–µ', '–ø–æ–±–æ–∏', '–ø–æ–±–æ', '—É–¥–∞—Ä', '–±—å–µ—Ç', '—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ'],
}


# --- –£–õ–£–ß–®–ï–ù–ò–ï: –ü–æ–ª–Ω—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ---
SOURCE_MAPPING = {
    '–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1400000226',
    '—É–≥–æ–ª–æ–≤–Ω': 'https://adilet.zan.kz/rus/docs/K1400000226',
    '–£–≥–æ–ª–æ–≤–Ω–æ-–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1400000231',
    '–£–≥–æ–ª–æ–≤–Ω–æ-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1400000234',

    '–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö': 'https://adilet.zan.kz/rus/docs/K1400000235',
    '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω': 'https://adilet.zan.kz/rus/docs/K1400000235',

    '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K940001000_',
    '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫': 'https://adilet.zan.kz/rus/docs/K940001000_',
    '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1500000377',
    '–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω': 'https://adilet.zan.kz/rus/docs/K1500000377',

    '–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1500000414',
    '—Ç—Ä—É–¥–æ–≤': 'https://adilet.zan.kz/rus/docs/K1500000414',
    
    '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1500000375',
    '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫': 'https://adilet.zan.kz/rus/docs/K1500000375',

    '–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K2300000224',
    '—Å–æ—Ü–∏–∞–ª—å–Ω': 'https://adilet.zan.kz/rus/docs/K2300000224',

    '–ö–æ–¥–µ–∫—Å –æ –±—Ä–∞–∫–µ (—Å—É–ø—Ä—É–∂–µ—Å—Ç–≤–µ) –∏ —Å–µ–º—å–µ': 'https://adilet.zan.kz/rus/docs/K1100000518',
    '—Å–µ–º–µ–π–Ω': 'https://adilet.zan.kz/rus/docs/K1100000518',
    '–±—Ä–∞—á–Ω': 'https://adilet.zan.kz/rus/docs/K1100000518',

    '–ö–æ–¥–µ–∫—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞—Ä–æ–¥–∞ –∏ —Å–∏—Å—Ç–µ–º–µ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è': 'https://adilet.zan.kz/rus/docs/K2000000360',
    '–∑–¥–æ—Ä–æ–≤—å': 'https://adilet.zan.kz/rus/docs/K2000000360',
    '–º–µ–¥–∏—Ü–∏–Ω': 'https://adilet.zan.kz/rus/docs/K2000000360',

    '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K2100000400',
    '—ç–∫–æ–ª–æ–≥–∏—á': 'https://adilet.zan.kz/rus/docs/K2100000400',
    
    '–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1700000120',
    '–Ω–∞–ª–æ–≥–æ–≤': 'https://adilet.zan.kz/rus/docs/K1700000120',

    '–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K080000095_',
    '–±—é–¥–∂–µ—Ç–Ω': 'https://adilet.zan.kz/rus/docs/K080000095_',

    '–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1700000123',
    '—Ç–∞–º–æ–∂–µ–Ω': 'https://adilet.zan.kz/rus/docs/K1700000123',

    '–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K030000442_',
    '–∑–µ–º–µ–ª—å–Ω': 'https://adilet.zan.kz/rus/docs/K030000442_',

    '–õ–µ—Å–Ω–æ–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K030000473_',
    '–ª–µ—Å–Ω': 'https://adilet.zan.kz/rus/docs/K030000473_',

    '–í–æ–¥–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1600000049',
    '–≤–æ–¥–Ω': 'https://adilet.zan.kz/rus/docs/K1600000049',

    '–ö–æ–¥–µ–∫—Å –æ –Ω–µ–¥—Ä–∞—Ö –∏ –Ω–µ–¥—Ä–æ–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏': 'https://adilet.zan.kz/rus/docs/K1700000125',
    '–Ω–µ–¥—Ä–∞': 'https://adilet.zan.kz/rus/docs/K1700000125',
}


# --- –ù–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ (–í–µ—Ä—Å–∏—è 3.0) ---
def find_laws_by_keywords(question, max_results=5):
    results = []
    question_lower = question.lower()
    question_words = set(re.findall(r'\b\w{3,}\b', question_lower))

    if not LAW_DB:
        print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤ –ø—É—Å—Ç–∞!")
        return []

    expanded_terms = set(question_words)
    for word in question_words:
        for key_term, synonyms in LEGAL_SYNONYMS.items():
            if word in synonyms or word == key_term:
                expanded_terms.update(synonyms)
                expanded_terms.add(key_term)
    
    print(f"üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø–æ–∏—Å–∫–∞: {expanded_terms}")

    for entry in LAW_DB:
        title_lower = entry.get("title", "").lower()
        text_lower = entry.get("text", "").lower()
        
        relevance = calculate_relevance(expanded_terms, title_lower, text_lower)

        if relevance > 0:
            entry_copy = entry.copy()
            entry_copy["relevance"] = relevance
            results.append(entry_copy)
            
    results.sort(key=lambda x: x["relevance"], reverse=True)
    return results[:max_results]


# --- –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–í–µ—Ä—Å–∏—è 3.0) ---
def calculate_relevance(expanded_terms, title_lower, text_lower):
    relevance = 0
    
    for term in expanded_terms:
        if term in title_lower:
            relevance += 10
            
    for term in expanded_terms:
        if term in text_lower:
            relevance += 2

    matched_terms_count = sum(1 for term in expanded_terms if term in title_lower or term in text_lower)
    if matched_terms_count > 1:
        relevance += matched_terms_count * 2

    return relevance


# --- –ù–∞–¥–µ–∂–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–í–µ—Ä—Å–∏—è 3.0) ---
def load_law_db():
    global LAW_DB
    try:
        with open("laws/kazakh_laws.json", "r", encoding="utf-8") as f:
            raw_db = json.load(f)
        LAW_DB = preprocess_laws_into_articles(raw_db)
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(LAW_DB)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–∞–∫–æ–Ω–æ–≤: {e}")
        LAW_DB = []

def preprocess_laws_into_articles(raw_db):
    records = []
    heading_pattern = re.compile(r'^(—Å—Ç–∞—Ç—å—è|–≥–ª–∞–≤–∞|—Ä–∞–∑–¥–µ–ª|–ø–æ–¥—Ä–∞–∑–¥–µ–ª|–ø–∞—Ä–∞–≥—Ä–∞—Ñ)', re.IGNORECASE)

    for code_entry in raw_db:
        code_name = code_entry.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        full_text = code_entry.get("text", "")
        source = code_entry.get("source") or determine_source_by_content(code_name)
        items = full_text.splitlines()
        current_title = None
        buffer = []

        for line in items:
            line = line.strip()
            if not line:
                continue
            
            if heading_pattern.match(line):
                if current_title and buffer:
                    records.append({
                        "title": f"{code_name}: {current_title}",
                        "text": " ".join(buffer).strip(),
                        "source": source,
                    })
                buffer = []
                current_title = line
            else:
                buffer.append(line)

        if current_title and buffer:
            records.append({
                "title": f"{code_name}: {current_title}",
                "text": " ".join(buffer).strip(),
                "source": source,
            })
    return records

load_law_db()


# --- –§—É–Ω–∫—Ü–∏–∏ `determine_source_by_content` –∏ `determine_code_name` —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–π –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å ---
def determine_source_by_content(content):
    content_lower = content.lower()
    for keyword, url in SOURCE_MAPPING.items():
        if keyword in content_lower:
            return url
    return "https://adilet.zan.kz"

def determine_code_name(content):
    content_lower = content.lower()
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
    name_mapping = {
        '—É–≥–æ–ª–æ–≤–Ω': '–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω': '–ö–æ–ê–ü –†–ö',
        '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫': '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω': '–ì–ü–ö –†–ö',
        '—Ç—Ä—É–¥–æ–≤': '–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–ö',
        '—Å–æ—Ü–∏–∞–ª—å–Ω': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '—Å–µ–º–µ–π–Ω': '–ö–æ–¥–µ–∫—Å –æ –±—Ä–∞–∫–µ –∏ —Å–µ–º—å–µ –†–ö',
        '–∑–¥–æ—Ä–æ–≤—å': '–ö–æ–¥–µ–∫—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ',
        '—ç–∫–æ–ª–æ–≥–∏—á': '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–Ω–∞–ª–æ–≥–æ–≤': '–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–±—é–¥–∂–µ—Ç–Ω': '–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '—Ç–∞–º–æ–∂–µ–Ω': '–¢–∞–º–æ–∂–µ–Ω–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–∑–µ–º–µ–ª—å–Ω': '–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–ª–µ—Å–Ω': '–õ–µ—Å–Ω–æ–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–≤–æ–¥–Ω': '–í–æ–¥–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–Ω–µ–¥—Ä–∞': '–ö–æ–¥–µ–∫—Å –æ –Ω–µ–¥—Ä–∞—Ö',
    }
    for keyword, name in name_mapping.items():
        if keyword in content_lower:
            return name
    return "–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–ö"


# üìÑ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def format_laws(laws):
    if not laws:
        return "<br><div style='background: #fff3cd; padding: 15px; border-radius: 8px; margin: 10px 0; border-left: 4px solid #ffc107;'>‚ö†Ô∏è <strong>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</strong><br><small style='color: #856404;'>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.</small></div>"

    output = "<br><div style='background: #e8f4fd; padding: 20px; border-radius: 10px; margin: 15px 0; border-left: 4px solid #0066cc;'>"
    output += "<h3 style='color: #0066cc; margin-top: 0;'>üìö –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–ö</h3>"

    for i, law in enumerate(laws, 1):
        title = law.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        text = law.get('text', '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        source = law.get('source') or determine_source_by_content(title) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        relevance = law.get('relevance', 0)
        article_info = extract_article_info(title)
        code_name = determine_code_name(title) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        preview = text[:400] + "..." if len(text) > 400 else text

        output += f"<div style='background: white; margin: 15px 0; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>"
        output += f"<div style='display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;'>"
        output += f"<h4 style='color: #0066cc; margin: 0; flex: 1;'>{i}. {title}</h4>"
        output += f"</div>"
        
        if article_info:
            output += f"<div style='background: #f8f9fa; padding: 8px; border-radius: 4px; margin: 8px 0;'><strong style='color: #495057;'>üìç {article_info}</strong></div>"
        
        output += f"<div style='background: #fafbfc; padding: 10px; border-left: 3px solid #dee2e6; margin: 10px 0;'><p style='margin: 0; color: #555; line-height: 1.5;'>{preview}</p></div>"
        
        output += f"<div style='display: flex; justify-content: space-between; align-items: center; margin-top: 12px;'>"
        output += f"<span style='color: #6c757d; font-size: 13px;'><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {code_name}</span>"
        
        tooltip_html_text = "–≠—Ç–æ '–æ—á–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏', –∞ –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã. –ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞—Ç—å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –û—á–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ —Ç–µ–∫—Å—Ç–µ —Å—Ç–∞—Ç—å–∏."
        relevance_display = f"""
        <div class="tooltip-container">
            <span style='background: #28a745; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; white-space: nowrap;'>
                üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance}
            </span>
            <span class="tooltip-text">{tooltip_html_text}</span>
        </div>
        """
        
        output += f"<div style='display: flex; align-items: center; gap: 15px;'>"
        output += relevance_display
        output += f"<a href='{source}' target='_blank' style='background: #007bff; color: white; padding: 6px 12px; border-radius: 4px; text-decoration: none; font-size: 12px; font-weight: 500;'>üîó –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
        output += f"</div>"
        
        output += f"</div></div>"

    output += "</div>"
    return output

def extract_article_info(title):
    patterns = [
        r'—Å—Ç–∞—Ç—å—è\s*(\d+)', r'—Å—Ç\.\s*(\d+)', r'–≥–ª–∞–≤–∞\s*(\d+)', r'–≥–ª\.\s*(\d+)',
        r'–ø–∞—Ä–∞–≥—Ä–∞—Ñ\s*(\d+)', r'–ø—É–Ω–∫—Ç\s*(\d+)', r'–ø\.\s*(\d+)',
        r'—Ä–∞–∑–¥–µ–ª\s*([IVX]+|\d+)', r'–ø–æ–¥—Ä–∞–∑–¥–µ–ª\s*(\d+)'
    ]
    found_parts = []
    title_lower = title.lower()
    for pattern in patterns:
        matches = re.findall(pattern, title_lower, re.IGNORECASE)
        for match in matches:
            if '—Å—Ç–∞—Ç—å—è' in pattern or '—Å—Ç.' in pattern: found_parts.append(f"–°—Ç–∞—Ç—å—è {match}")
            elif '–≥–ª–∞–≤–∞' in pattern or '–≥–ª.' in pattern: found_parts.append(f"–ì–ª–∞–≤–∞ {match}")
            elif '–ø–∞—Ä–∞–≥—Ä–∞—Ñ' in pattern: found_parts.append(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {match}")
            elif '–ø—É–Ω–∫—Ç' in pattern or '–ø.' in pattern: found_parts.append(f"–ü—É–Ω–∫—Ç {match}")
            elif '—Ä–∞–∑–¥–µ–ª' in pattern: found_parts.append(f"–†–∞–∑–¥–µ–ª {match}")
            elif '–ø–æ–¥—Ä–∞–∑–¥–µ–ª' in pattern: found_parts.append(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª {match}")
    return ", ".join(found_parts) if found_parts else None

PROMPT_TEMPLATE = """
–¢—ã –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —é—Ä–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—ã—á–Ω—ã–º –ª—é–¥—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∏—Ö –ø—Ä–∞–≤–∞—Ö. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—ä—è—Å–Ω–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ–Ω—è—Ç–Ω–æ –¥–∞–∂–µ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –±–µ–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–µ. 

–í–ê–ñ–ù–û! –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫—Ä–∞—Å–∏–≤–æ:
- –ò—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞–º–∏ —Å ‚Ä¢ –∏–ª–∏ —Ü–∏—Ñ—Ä–∞–º–∏  
- –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
- –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞, –≤—ã–¥–µ–ª–∏ –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Ç—Ä—É–¥–æ–≤—ã—Ö —Å–ø–æ—Ä–æ–≤, –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å–æ–±–∏–π ‚Äî –æ—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–æ—Ä–º—ã (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å). 
–ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ª–µ–∫—Å–∏–∫–∏. 
–ï—Å–ª–∏ –º–æ–∂–µ—à—å ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —à–∞–±–ª–æ–Ω –∑–∞—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∂–∞–ª–æ–±—ã –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞. 
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 2500 —Å–∏–º–≤–æ–ª–æ–≤.

–í–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 
---
{question}
"""

def convert_markdown_to_html(text):
    text = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', text)
    text = re.sub(r'\*(.*?)\*', r'<em>\1</em>', text)
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
    text = re.sub(r'^‚Ä¢ ', '<span class="bullet">üî∏</span> ', text, flags=re.MULTILINE)
    text = re.sub(r'^\* ', '<span class="bullet">üî∏</span> ', text, flags=re.MULTILINE)
    text = re.sub(r'^- ', '<span class="bullet">üî∏</span> ', text, flags=re.MULTILINE)
    text = re.sub(r'^(\d+)\. ', r'<strong class="number">\1.</strong> ', text, flags=re.MULTILINE)
    lines = text.split('\n')
    formatted = []
    for line in lines:
        if '<span class="bullet">' in line or '<strong class="number">' in line:
            formatted.append(f'<div class="list-item">{line}</div>')
        else:
            formatted.append(line)
    return '\n'.join(formatted)

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç /ask —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π ---
@app.route("/ask", methods=["POST"])
def ask_streaming():
    data = request.json
    question = data.get("question", "").strip()
    if not question:
        return jsonify({"error": "–ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å"}), 400

    def generate_response():
        try:
            prompt = PROMPT_TEMPLATE.format(question=question)
            stream = model.generate_content(prompt, stream=True)
            for chunk in stream:
                if chunk.text:
                    html_chunk = convert_markdown_to_html(chunk.text)
                    yield html_chunk

            laws_found = find_laws_by_keywords(question)
            law_section_html = format_laws(laws_found)
            yield law_section_html

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: {e}")
            yield "<div style='color: red;'>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.</div>"

    return Response(stream_with_context(generate_response()), mimetype='text/html')

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
@app.route("/")
def index():
    return send_from_directory(app.static_folder, "index.html")

@app.route("/<path:path>")
def static_files(path):
    return send_from_directory(app.static_folder, path)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

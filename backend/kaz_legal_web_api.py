# kaz_legal_web_api.py (–í–µ—Ä—Å–∏—è 4.0 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –∏ –ø–æ–ª–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
from memory import init_db, save_message, load_conversation
init_db()
from flask import Flask, request, jsonify, Response, stream_with_context, send_from_directory
import google.generativeai as genai
import os
import json
import re
from flask_cors import CORS

app = Flask(__name__, static_folder='../frontend', static_url_path='')
CORS(app, origins=["https://ai-lawyer-tau.vercel.app"])

# üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

LAW_DB = [] 

# --- –£–õ–£–ß–®–ï–ù–ò–ï: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ ---
LEGAL_SYNONYMS = {
    # –¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ': ['—É–≤–æ–ª–µ–Ω', '—É–≤–æ–ª—å–Ω', '—É–≤–æ–ª–∏—Ç—å', '—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ', '—Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å', '—Ä–∞—Å—Ç–æ—Ä–∂', '–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ', '–ø—Ä–µ–∫—Ä–∞—â', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ', '–æ—Å–≤–æ–±–æ–∂–¥', '–æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ', '–æ—Ç—Å—Ç—Ä–∞–Ω–µ–Ω', '—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ', '—Å–æ–∫—Ä–∞—â–µ–Ω', '—Å–æ–∫—Ä–∞—â', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–æ–µ', '–≤–∑—ã—Å–∫–∞–Ω–∏–µ'],
    '–∑–∞—Ä–ø–ª–∞—Ç–∞': ['–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è', '–∑–∞—Ä–ø–ª–∞—Ç', '–æ–ø–ª–∞—Ç–∞', '–æ–∫–ª–∞–¥', '–≤—ã–ø–ª–∞—Ç–∞', '–≤—ã–ø–ª–∞—Ç', '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω', '–∂–∞–ª–æ–≤–∞–Ω–∏–µ', '–∂–∞–ª–æ–≤–∞–Ω', '–¥–æ—Ö–æ–¥', '–ø–æ–ª—É—á–∫–∞', '–ø—Ä–µ–º–∏—è', '–ø—Ä–µ–º–∏–∞–ª—å–Ω', '–Ω–∞–¥–±–∞–≤–∫–∞', '–Ω–∞–¥–±–∞–≤–∫', '—Ç–∞—Ä–∏—Ñ'],
    '–æ—Ç–ø—É—Å–∫': ['–æ—Ç–ø—É—Å–∫', '–æ—Ç–¥—ã—Ö', '–∫–∞–Ω–∏–∫—É–ª—ã', '–≤—ã—Ö–æ–¥–Ω–æ–π', '–≤—ã—Ö–æ–¥–Ω', '–ø–µ—Ä–µ—Ä—ã–≤', '–æ—Ç–≥—É–ª', '–Ω–µ—Ä–∞–±–æ—á–∏–π'],
    '–±–æ–ª—å–Ω–∏—á–Ω—ã–π': ['–±–æ–ª—å–Ω–∏—á–Ω', '–Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', '–Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω', '–±–æ–ª–µ–∑–Ω—å', '–ª–µ—á–µ–Ω–∏–µ', '–ª–µ—á–µ–Ω', '–ª–∏—Å—Ç–æ–∫', '–≤—Ä–µ–º–µ–Ω–Ω–∞—è', '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å', '–∏–Ω–≤–∞–ª–∏–¥–Ω'],
    '—Ä–∞–±–æ—Ç–∞': ['—Ç—Ä—É–¥', '—Ä–∞–±–æ—Ç', '—Å–ª—É–∂–±–∞', '—Å–ª—É–∂–±', '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç', '–∑–∞–Ω—è—Ç–æ—Å—Ç—å', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω', '–¥–æ–ª–∂–Ω–æ—Å—Ç—å', '–¥–æ–ª–∂–Ω–æ—Å—Ç', '–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏'],
    '—Ä–∞–±–æ—Ç–Ω–∏–∫': ['—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—Å–ª—É–∂–∞—â–∏–π', '—Å–ª—É–∂–∞—â', '–ø–µ—Ä—Å–æ–Ω–∞–ª', '–∫–∞–¥—Ä—ã', '–∫–∞–¥—Ä', '—Ç—Ä—É–¥—è—â–∏–π—Å—è', '—Ç—Ä—É–¥—è—â', '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'],
    '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å': ['–Ω–∞–Ω–∏–º–∞—Ç–µ–ª—å', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü', '–∫–æ–º–ø–∞–Ω–∏—è', '—Ñ–∏—Ä–º–∞', '—É—á—Ä–µ–∂–¥–µ–Ω–∏–µ'],
    
    # –ñ–∏–ª–∏—â–Ω–æ–µ –ø—Ä–∞–≤–æ
    '–∂–∏–ª—å–µ': ['–∂–∏–ª–∏—â–µ', '–∂–∏–ª–∏—â', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–≤–∞—Ä—Ç–∏—Ä', '–¥–æ–º', '–ø–æ–º–µ—â–µ–Ω–∏–µ', '–ø–æ–º–µ—â–µ–Ω', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–Ω–µ–¥–≤–∏–∂–∏–º', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç', '–≤–ª–∞–¥–µ–Ω–∏–µ', '–≤–ª–∞–¥–µ–Ω', '–∂–∏–ª–ø–ª–æ—â–∞–¥—å'],
    '–∞—Ä–µ–Ω–¥–∞': ['–∞—Ä–µ–Ω–¥', '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å', '–Ω–∞–π–º', '–Ω–∞–µ–º', '—Å—ä–µ–º', '—Å–Ω–∏–º–∞—Ç—å', '–ø–æ–¥–Ω–∞–µ–º', '–¥–æ–≥–æ–≤–æ—Ä', '–ø–ª–∞—Ç–∞', '–∞—Ä–µ–Ω–¥–Ω–∞—è'],
    '–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞': ['–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', '–∫–æ–º–º—É–Ω–∞–ª–∫', '—É—Å–ª—É–≥–∏', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', '—Å–æ–¥–µ—Ä–∂–∞–Ω', '—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è', '—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü', '—Ä–µ–º–æ–Ω—Ç', '–ö–£'],
    '–≤—ã—Å–µ–ª–µ–Ω–∏–µ': ['–≤—ã—Å–µ–ª–µ–Ω', '–≤—ã—Å–µ–ª–∏—Ç—å', '–∏–∑—ä—è—Ç–∏–µ', '–∏–∑—ä—è—Ç', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω', '–≤—ã–¥–≤–æ—Ä–µ–Ω–∏–µ', '–≤—ã–¥–≤–æ—Ä–µ–Ω'],

    # –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ
    '–ø–æ—Å–æ–±–∏–µ': ['–ø–æ—Å–æ–±–∏', '–≤—ã–ø–ª–∞—Ç–∞', '–≤—ã–ø–ª–∞—Ç', '—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ', '—Å–æ—Ü–∏–∞–ª—å–Ω', '–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–¥–¥–µ—Ä–∂–∫', '–ª—å–≥–æ—Ç–∞', '–ª—å–≥–æ—Ç', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü', '—Å—É–±—Å–∏–¥–∏—è'],
    '–ø–µ–Ω—Å–∏—è': ['–ø–µ–Ω—Å–∏–æ–Ω', '–ø–µ–Ω—Å–∏–æ–Ω–Ω–æ–µ', '–≤—ã—Å–ª—É–≥–∞', '—Å—Ç–∞—Ä–æ—Å—Ç—å', '–ø–æ —Å—Ç–∞—Ä–æ—Å—Ç–∏', '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å', '–∏–Ω–≤–∞–ª–∏–¥–Ω', '–ø–æ—Ç–µ—Ä—è –∫–æ—Ä–º–∏–ª—å—Ü–∞', '–∫–æ—Ä–º–∏–ª–µ—Ü'],
    '–¥–µ–∫—Ä–µ—Ç': ['–¥–µ–∫—Ä–µ—Ç–Ω', '–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ', '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫', '–æ—Ç—Ü–æ–≤—Å—Ç–≤–æ', '–æ—Ç—Ü–æ–≤—Å–∫', '—Ä–µ–±–µ–Ω–æ–∫', '—Ä–æ–∂–¥–µ–Ω–∏–µ', '—Ä–æ–∂–¥–µ–Ω', '—É—Å—ã–Ω–æ–≤–ª–µ–Ω–∏–µ', '—É—Å—ã–Ω–æ–≤–ª–µ–Ω', '–±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å', '–±–µ—Ä–µ–º–µ–Ω'],
    '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å': ['–∏–Ω–≤–∞–ª–∏–¥', '–∏–Ω–≤–∞–ª–∏–¥–Ω', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '–≥—Ä—É–ø–ø–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è', '—Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü'],

    # –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ
    '–¥–æ–≥–æ–≤–æ—Ä': ['—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', '—Å–æ–≥–ª–∞—à–µ–Ω', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '—Å–¥–µ–ª–∫–∞', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤', '—É—Å–ª–æ–≤–∏–µ', '—É—Å–ª–æ–≤–∏—è', '–ø–∞–∫—Ç', '–¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'],
    '–¥–æ–ª–≥': ['–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å', '–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤', '–∑–∞–µ–º', '–∑–∞–π–º', '–∫—Ä–µ–¥–∏—Ç', '–≤–∑—ã—Å–∫–∞–Ω–∏–µ', '–≤–∑—ã—Å–∫–∞–Ω', '–Ω–µ—É–ø–ª–∞—Ç–∞'],
    '–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ': ['–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω', '–∑–∞–≤–µ—â–∞–Ω–∏–µ', '–∑–∞–≤–µ—â–∞–Ω', '–Ω–∞—Å–ª–µ–¥–Ω–∏–∫', '–∏–º—É—â–µ—Å—Ç–≤–æ', '–∏–º—É—â–µ—Å—Ç–≤', '–ø—Ä–∞–≤–æ–ø—Ä–µ–µ–º—Å—Ç–≤–æ'],
    '—Ä–∞–∑–≤–æ–¥': ['—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ', '—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω', '–±—Ä–∞–∫', '—Å—É–ø—Ä—É–≥', '—Å—É–ø—Ä—É–≥–∞', '—Å–µ–º–µ–π–Ω—ã–π', '—Å–µ–º–µ–π–Ω', '–∞–ª–∏–º–µ–Ω—Ç—ã', '—Ä–∞–∑–¥–µ–ª –∏–º—É—â–µ—Å—Ç–≤–∞'],

    # –£–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ
    '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ': ['–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω', '—É–≥–æ–ª–æ–≤–Ω–æ–µ', '—É–≥–æ–ª–æ–≤–Ω', '–ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω', '–¥–µ—è–Ω–∏–µ', '–¥–µ—è–Ω', '—Å–æ—Å—Ç–∞–≤', '–≤–∏–Ω–∞', '–Ω–∞–∫–∞–∑–∞–Ω–∏–µ', '–Ω–∞–∫–∞–∑–∞–Ω', '–∑–ª–æ–¥–µ—è–Ω–∏–µ', '–ø—Ä–æ—Å—Ç—É–ø–æ–∫'],
    '–∫—Ä–∞–∂–∞': ['–∫—Ä–∞–∂', '—Ö–∏—â–µ–Ω–∏–µ', '—Ö–∏—â–µ–Ω', '–ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ', '–ø—Ä–∏—Å–≤–æ–µ–Ω', '—Ä–∞—Å—Ç—Ä–∞—Ç–∞', '—Ä–∞—Å—Ç—Ä–∞—Ç', '–≥—Ä–∞–±–µ–∂', '—Ä–∞–∑–±–æ–π'],
    '–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ': ['–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤', '–æ–±–º–∞–Ω', '–∞—Ñ–µ—Ä–∞', '–∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', '–∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª', '—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–∏—Ä–∞–º–∏–¥–∞'],
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ
    '—à—Ç—Ä–∞—Ñ': ['–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω', '–≤–∑—ã—Å–∫–∞–Ω–∏–µ', '–≤–∑—ã—Å–∫–∞–Ω', '–Ω–∞–∫–∞–∑–∞–Ω–∏–µ', '–Ω–∞–∫–∞–∑–∞–Ω', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–Ω–∞—Ä—É—à–µ–Ω', '—Å–∞–Ω–∫—Ü–∏—è', '—Å–∞–Ω–∫—Ü–∏', '–ø—Ä–æ—Ç–æ–∫–æ–ª'],
    '–ø—Ä–∞–≤–∞': ['–ø—Ä–∞–≤–æ', '–ø—Ä–∞–≤–æ–º–æ—á–∏–µ', '–ø–æ–ª–Ω–æ–º–æ—á–∏–µ', '—Å–≤–æ–±–æ–¥–∞', '—Å–≤–æ–±–æ–¥', '–≥–∞—Ä–∞–Ω—Ç–∏—è', '–≥–∞—Ä–∞–Ω—Ç', '–∑–∞—â–∏—Ç–∞', '–∑–∞—â–∏—Ç', '–∏–Ω—Ç–µ—Ä–µ—Å—ã'],

    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∑–∞—â–∏—Ç–∞ –¥–µ—Ç–µ–π
    '—É—á–∏—Ç–µ–ª—å': ['—É—á–∏—Ç–µ–ª', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ø—Ä–µ–ø–æ–¥–∞', '–ø–µ–¥–∞–≥–æ–≥', '–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫', '–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å'],
    '—É—á–µ–Ω–∏–∫': ['—É—á–µ–Ω–∏–∫', '—É—á–∞—â–∏–π—Å—è', '—É—á–∞—â', '—à–∫–æ–ª—å–Ω–∏–∫', '—à–∫–æ–ª—å–Ω', '—Å—Ç—É–¥–µ–Ω—Ç', '–≤–æ—Å–ø–∏—Ç–∞–Ω–Ω–∏–∫', '–≤–æ—Å–ø–∏—Ç–∞–Ω', '–æ–±—É—á–∞—é—â–∏–π—Å—è'],
    '—à–∫–æ–ª–∞': ['—à–∫–æ–ª', '—É—á–∏–ª–∏—â–µ', '–ª–∏—Ü–µ–π', '–≥–∏–º–Ω–∞–∑–∏—è', '–∫–æ–ª–ª–µ–¥–∂', '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ', '–æ–±—Ä–∞–∑–æ–≤–∞—Ç', '—É—á–µ–±–Ω–æ–µ', '—É—á–µ–±–Ω', '–∑–∞–≤–µ–¥–µ–Ω–∏–µ'],
    '—Ä–µ–±–µ–Ω–æ–∫': ['—Ä–µ–±–µ–Ω', '–¥–µ—Ç–∏', '–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–π', '–Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç', '–º–∞–ª–æ–ª–µ—Ç–Ω–∏–π', '–º–∞–ª–æ–ª–µ—Ç', '–¥–∏—Ç—è', '–ø–æ–¥—Ä–æ—Å—Ç–æ–∫', '–ø–æ–¥—Ä–æ—Å—Ç'],
    '–Ω–∞—Å–∏–ª–∏–µ': ['–Ω–∞—Å–∏–ª–∏', '–∂–µ—Å—Ç–æ–∫–æ—Å—Ç—å', '–∂–µ—Å—Ç–æ–∫', '–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏–µ', '–ø—Ä–∏–Ω—É–∂–¥–µ–Ω', '–∞–≥—Ä–µ—Å—Å–∏—è', '–∞–≥—Ä–µ—Å—Å–∏', '–∏–∑–±–∏–µ–Ω–∏–µ', '–∏–∑–±–∏–µ–Ω', '–¥–æ–º–∞—à–Ω–µ–µ', '–ø–æ–±–æ–∏', '–ø–æ–±–æ', '—É–¥–∞—Ä', '–±—å–µ—Ç', '—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ'],

    # –ü–î–î –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    '–ø–¥–¥': ['–ø–¥–¥', '–ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è', '–¥–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏', '–¥–æ—Ä–æ–∂–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ', '–¥–≤–∏–∂–µ–Ω–∏–µ', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–¥–æ—Ä–æ–≥–∞', '–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫', '–ø–æ–ª–æ—Å–∞', '—Å–≤–µ—Ç–æ—Ñ–æ—Ä', '–∑–µ–±—Ä–∞'],
    '—Å–∞–º–æ–∫–∞—Ç': ['—Å–∞–º–æ–∫–∞—Ç', '—ç–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç', '–≥–∏—Ä–æ—Å–∫—É—Ç–µ—Ä', '—Å—Ä–µ–¥—Å—Ç–≤–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏', '—Å–∏–º'],
    '–≤–µ–ª–æ—Å–∏–ø–µ–¥': ['–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–≤–µ–ª–æ–¥–æ—Ä–æ–∂–∫–∞', '–≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç', '–¥–≤—É—Ö–∫–æ–ª–µ—Å–Ω—ã–π'],
    '–∞–≤—Ç–æ–±—É—Å–Ω–∞—è –ø–æ–ª–æ—Å–∞': ['–∞–≤—Ç–æ–±—É—Å–Ω–∞—è –ø–æ–ª–æ—Å–∞', '–ø–æ–ª–æ—Å–∞ –¥–ª—è –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞', '–≤—ã–¥–µ–ª–µ–Ω–∫–∞', '–≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ–ª–æ—Å–∞']
}


# --- –£–õ–£–ß–®–ï–ù–ò–ï: –ü–æ–ª–Ω—ã–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ---
SOURCE_MAPPING = {
    '–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1400000226',
    '—É–≥–æ–ª–æ–≤–Ω': 'https://adilet.zan.kz/rus/docs/K1400000226',

    '–û–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö': 'https://adilet.zan.kz/rus/docs/K1400000235',
    '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω': 'https://adilet.zan.kz/rus/docs/K1400000235',

    '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K940001000_',
    '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫': 'https://adilet.zan.kz/rus/docs/K940001000_',

    '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1500000377',
    '–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω': 'https://adilet.zan.kz/rus/docs/K1500000377',

    '–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1500000414',
    '—Ç—Ä—É–¥–æ–≤': 'https://adilet.zan.kz/rus/docs/K1500000414',

    '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1500000375',
    '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫': 'https://adilet.zan.kz/rus/docs/K1500000375',

    '–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K2300000224',
    '—Å–æ—Ü–∏–∞–ª—å–Ω': 'https://adilet.zan.kz/rus/docs/K2300000224',

    '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K2100000400',
    '—ç–∫–æ–ª–æ–≥–∏—á': 'https://adilet.zan.kz/rus/docs/K2100000400',

    '–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K080000095_',
    '–±—é–¥–∂–µ—Ç–Ω': 'https://adilet.zan.kz/rus/docs/K080000095_',

    '–í–æ–¥–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1600000049',
    '–≤–æ–¥–Ω': 'https://adilet.zan.kz/rus/docs/K1600000049',

    '–û –∂–∏–ª–∏—â–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö': 'https://adilet.zan.kz/rus/docs/Z970000254_',
    '–∂–∏–ª–∏—â': 'https://adilet.zan.kz/rus/docs/Z970000254_',

    '–û–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏': 'https://adilet.zan.kz/rus/docs/Z070000319_',
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω': 'https://adilet.zan.kz/rus/docs/Z070000319_',

    '–ü—Ä–∞–≤–∏–ª–∞ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è': 'https://adilet.zan.kz/rus/docs/V2300033003',
    '–ø–¥–¥': 'https://adilet.zan.kz/rus/docs/V2300033003',
    '—Å–∞–º–æ–∫–∞—Ç': 'https://adilet.zan.kz/rus/docs/V2300033003',
    '–≤–µ–ª–æ—Å–∏–ø–µ–¥': 'https://adilet.zan.kz/rus/docs/V2300033003',
    '—Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏': 'https://adilet.zan.kz/rus/docs/V2300033003',
}


# --- –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
def find_laws_by_keywords(question, min_relevance=12, max_results=8):
    results = []
    question_lower = question.lower()
    question_words = set(re.findall(r'\b\w{3,}\b', question_lower))
    if not LAW_DB:
        return []

    priority_codes = []
    if any(w in question_lower for w in ['—É–≤–æ–ª—å–Ω', '—Ä–∞–±–æ—Ç', '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç', '—Ç—Ä—É–¥', '–∑–∞—Ä–ø–ª–∞—Ç']):
        priority_codes.append('—Ç—Ä—É–¥–æ–≤')
    elif any(w in question_lower for w in ['–∂–∏–ª—å–µ', '–∞—Ä–µ–Ω–¥–∞', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–≤—ã—Å–µ–ª']):
        priority_codes.append('–∂–∏–ª–∏—â')
    elif any(w in question_lower for w in ['–ø–µ–Ω—Å–∏—è', '–ø–æ—Å–æ–±–∏–µ', '–¥–µ–∫—Ä–µ—Ç']):
        priority_codes.append('—Å–æ—Ü–∏–∞–ª—å–Ω')
    elif any(w in question_lower for w in ['—Ä–∞–∑–≤–æ–¥', '–∞–ª–∏–º–µ–Ω—Ç—ã']):
        priority_codes.append('—Å–µ–º–µ–π–Ω')
    elif any(w in question_lower for w in ['—É—á–µ–Ω–∏–∫', '—É—á–∏—Ç–µ–ª—å', '—à–∫–æ–ª', '—É–¥–∞—Ä', '–Ω–∞—Å–∏–ª–∏']):
        priority_codes.extend(['—É–≥–æ–ª–æ–≤–Ω', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω'])

    expanded_terms = set(question_words)
    for word in question_words:
        for key_term, synonyms in LEGAL_SYNONYMS.items():
            if word in synonyms or word == key_term:
                expanded_terms.update(synonyms)
                expanded_terms.add(key_term)

    for entry in LAW_DB:
        title_lower = entry.get("title", "").lower()
        text_lower = entry.get("text", "").lower()
        relevance = calculate_relevance(expanded_terms, title_lower, text_lower)

        if any(code in title_lower for code in priority_codes):
            relevance += 10

        if relevance >= min_relevance:
            entry_copy = entry.copy()
            entry_copy["relevance"] = relevance
            results.append(entry_copy)

    results.sort(key=lambda x: x["relevance"], reverse=True)
    return results[:max_results]


def calculate_relevance(expanded_terms, title_lower, text_lower):
    relevance = 0;
    for term in expanded_terms:
        if term in title_lower: relevance += 10
        if term in text_lower: relevance += 2
    matched_terms_count = sum(1 for term in expanded_terms if term in title_lower or term in text_lower)
    if matched_terms_count > 1: relevance += matched_terms_count * 2
    return relevance

def load_law_db():
    global LAW_DB
    try:
        with open("laws/kazakh_laws.json", "r", encoding="utf-8") as f: raw_db = json.load(f)
        LAW_DB = preprocess_laws_into_articles(raw_db); print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –°—Ç–∞—Ç–µ–π: {len(LAW_DB)}")
    except Exception as e: print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã: {e}")

def preprocess_laws_into_articles(raw_db):
    records = []; heading_pattern = re.compile(r'^(—Å—Ç–∞—Ç—å—è|–≥–ª–∞–≤–∞|—Ä–∞–∑–¥–µ–ª|–ø–æ–¥—Ä–∞–∑–¥–µ–ª|–ø–∞—Ä–∞–≥—Ä–∞—Ñ)', re.IGNORECASE)
    for code_entry in raw_db:
        code_name = code_entry.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"); full_text = code_entry.get("text", ""); source = code_entry.get("source") or determine_source_by_content(code_name); items = full_text.splitlines()
        current_title = None; buffer = []
        for line in items:
            line = line.strip()
            if not line: continue
            if heading_pattern.match(line):
                if current_title and buffer: records.append({"title": f"{code_name}: {current_title}", "text": " ".join(buffer).strip(), "source": source})
                buffer = []; current_title = line
            else: buffer.append(line)
        if current_title and buffer: records.append({"title": f"{code_name}: {current_title}", "text": " ".join(buffer).strip(), "source": source})
    return records

load_law_db()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
def determine_source_by_content(content):
    content_lower = content.lower()
    for keyword, url in SOURCE_MAPPING.items():
        if keyword in content_lower: return url
    return "https://adilet.zan.kz"

def determine_code_name(content):
    content_lower = content.lower()
    name_mapping = {
        '—É–≥–æ–ª–æ–≤–Ω': '–£–ö –†–ö',
        '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω': '–ö–æ–ê–ü –†–ö',
        '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫': '–ì–ö –†–ö',
        '–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω': '–ì–ü–ö –†–ö',
        '—Ç—Ä—É–¥–æ–≤': '–¢–ö –†–ö',
        '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫': '–ü–ö –†–ö',
        '—Å–æ—Ü–∏–∞–ª—å–Ω': '–°–ö –†–ö',
        '—Å–µ–º–µ–π–Ω': '–ö–æ–¥–µ–∫—Å –æ –±—Ä–∞–∫–µ',
        '–∑–¥–æ—Ä–æ–≤—å': '–ö–æ–¥–µ–∫—Å –æ –∑–¥–æ—Ä–æ–≤—å–µ',
        '—ç–∫–æ–ª–æ–≥–∏—á': '–≠–ö –†–ö',
        '–Ω–∞–ª–æ–≥–æ–≤': '–ù–ö –†–ö',
        '–±—é–¥–∂–µ—Ç–Ω': '–ë–ö –†–ö',
        '—Ç–∞–º–æ–∂–µ–Ω': '–¢–ö –†–ö',
        '–∑–µ–º–µ–ª—å–Ω': '–ó–ö –†–ö',
        '–ª–µ—Å–Ω': '–õ–ö –†–ö',
        '–≤–æ–¥–Ω': '–í–ö –†–ö',
        '–Ω–µ–¥—Ä–∞': '–ö–æ–¥–µ–∫—Å –æ –Ω–µ–¥—Ä–∞—Ö',
        '–ø–¥–¥': '–ü–î–î –†–ö',
        '—Å–∞–º–æ–∫–∞—Ç': '–ü–î–î –†–ö',
        '–≤–µ–ª–æ—Å–∏–ø–µ–¥': '–ü–î–î –†–ö'
    }
    for keyword, name in name_mapping.items():
        if re.search(r'\b' + re.escape(keyword) + r'\b', content_lower):
            return name
    return "–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–ö"


def format_laws(laws, shown_limit=5):
    if not laws:
        return "<div class='notice warning'>‚ö†Ô∏è <strong>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</strong><br><small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.</small></div>"

    output = "<div class='laws-container'><h3 class='laws-header'>üìö –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–ö</h3>"
    
    total_found = len(laws)
    limited_laws = laws[:shown_limit]

    if total_found > shown_limit:
        output += f"<div class='notice tip'>üîé –ù–∞–π–¥–µ–Ω–æ {total_found} —Å—Ç–∞—Ç–µ–π. –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ <strong>{shown_limit}</strong>, –ø–æ—Ç–æ–º—É —á—Ç–æ –ò–ò —É–∂–µ –¥–∞–ª –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã—à–µ.</div>"

    for i, law in enumerate(limited_laws, 1):
        title = law.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        text = law.get('text', '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        source = law.get('source') or determine_source_by_content(title)
        relevance = law.get('relevance', 0)
        article_info = extract_article_info(title)
        code_name = determine_code_name(title)
        preview = text[:400] + "..." if len(text) > 400 else text

        output += f"<div class='law-card'><div class='card-header'><h4 class='card-title'>{i}. {title}</h4></div>"
        if article_info:
            output += f"<div class='card-meta'><strong>üìç {article_info}</strong></div>"
        output += f"<div class='card-body'><p>{preview}</p></div>"
        output += f"<div class='card-footer'><span class='card-source'><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {code_name}</span><div class='footer-actions'>"
        output += f"""<div class="tooltip-container card-relevance"><span>üìä {relevance}</span><span class="tooltip-text">–≠—Ç–æ '–æ—á–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏' ‚Äî —á–µ–º –≤—ã—à–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Å—Ç–∞—Ç—å—è —Å–≤—è–∑–∞–Ω–∞ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.</span></div>"""
        output += f"<a href='{source}' target='_blank' class='card-link'>üîó –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a></div></div></div>"

    output += "</div>"
    return output

def extract_text_from_file(filepath):
    if filepath.endswith(".docx"):
        import docx
        doc = docx.Document(filepath)
        return "\n".join([p.text for p in doc.paragraphs])
    elif filepath.endswith(".pdf"):
        from PyPDF2 import PdfReader
        reader = PdfReader(filepath)
        return "\n".join([page.extract_text() for page in reader.pages])
    else:
        return ""


def extract_article_info(title):
    patterns = [r'—Å—Ç–∞—Ç—å—è\s*(\d+)', r'—Å—Ç\.\s*(\d+)', r'–≥–ª–∞–≤–∞\s*(\d+)', r'–≥–ª\.\s*(\d+)', r'–ø–∞—Ä–∞–≥—Ä–∞—Ñ\s*(\d+)', r'–ø—É–Ω–∫—Ç\s*(\d+)', r'–ø\.\s*(\d+)', r'—Ä–∞–∑–¥–µ–ª\s*([IVX]+|\d+)', r'–ø–æ–¥—Ä–∞–∑–¥–µ–ª\s*(\d+)']
    found_parts = []; title_lower = title.lower()
    for pattern in patterns:
        matches = re.findall(pattern, title_lower, re.IGNORECASE)
        for match in matches:
            if '—Å—Ç–∞—Ç—å—è' in pattern or '—Å—Ç.' in pattern: found_parts.append(f"–°—Ç–∞—Ç—å—è {match}")
            elif '–≥–ª–∞–≤–∞' in pattern or '–≥–ª.' in pattern: found_parts.append(f"–ì–ª–∞–≤–∞ {match}")
    return ", ".join(found_parts) if found_parts else None

def convert_full_markdown_to_html(text):
    text = text.strip()
    paragraphs = re.split(r'\n\s*\n', text)
    html_output = []

    for para in paragraphs:
        para = para.strip()
        if not para:
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ–º)
        if re.match(r'\*\*.+?:\*\*', para):
            para = re.sub(r'\*\*(.+?)\*\*', r'<strong>\1</strong>', para)
            html_output.append(f"<h3>{para}</h3>")
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤ —Å —Ç–∏—Ä–µ –∏–ª–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
        elif re.match(r'^[‚Ä¢*-] ', para):
            lines = para.split('\n')
            list_items = [
                f"<li>{re.sub(r'^[‚Ä¢*-] ', '', re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', line.strip()))}</li>"
                for line in lines if line.strip()
            ]
            html_output.append("<ul>" + "".join(list_items) + "</ul>")
        # –ü—Ä–æ—Å—Ç–æ–π –∞–±–∑–∞—Ü
        else:
            para = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', para)
            html_output.append(f"<p>{para}</p>")

    return "".join(html_output)


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–Ω–∞–ª—å–Ω–∞—è, —Å–∞–º–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ò–ò ---
PROMPT_TEMPLATE = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∏ —Å–∞–º—ã–π –≤ –º–∏—Ä–µ –ª—É—á—à–∏–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–∞–∫–æ–Ω–∞—Ö –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –ö —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—é—Ç—Å—è –æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∞–≤–∞ –∏ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.

–°–∏—Ç—É–∞—Ü–∏—è:
---
{question}
---

–û—Ç–≤–µ—á–∞–π —Å—Ä–∞–∑—É, –ø–æ –¥–µ–ª—É. –ë–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –±–µ–∑ —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ ¬´—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ¬ª, ¬´–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å¬ª. –ü—Ä–æ—Å—Ç–æ –ø–æ–º–æ–≥–∏.

–í–æ—Ç –∫–∞–∫ –Ω—É–∂–Ω–æ:

1. –û–±—ä—è—Å–Ω–∏, **—á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∑–∞–∫–æ–Ω**.
2. –£–∫–∞–∂–∏, **–Ω–∞—Ä—É—à–µ–Ω—ã –ª–∏ –ø—Ä–∞–≤–∞**, –∏ –∫–∞–∫–∏–µ.
3. –ü—Ä–∏–≤–µ–¥–∏ **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏**, –∫–æ—Ç–æ—Ä—ã–µ —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å.
4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî **–¥–∞–π —à–∞–±–ª–æ–Ω –∑–∞—è–≤–ª–µ–Ω–∏—è** (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø–æ–ª–∏—Ü–∏—é, —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é, –∞–∫–∏–º—É).
5. –ü–∏—à–∏ **–ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏**, –∏–∑–±–µ–≥–∞–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–µ–Ω –¥–∞–∂–µ —à–∫–æ–ª—å–Ω–∏–∫—É.
6. –ï—Å–ª–∏ –∑–∞–∫–æ–Ω–æ–≤ –ø–æ —Ç–µ–º–µ –Ω–µ—Ç ‚Äî —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏.

–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –∫—Ä–∞—Å–∏–≤–æ:
- –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ (**–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∑–∞–∫–æ–Ω?**, **–ß—Ç–æ –¥–µ–ª–∞—Ç—å?**, **–®–∞–±–ª–æ–Ω –∑–∞—è–≤–ª–µ–Ω–∏—è**)
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏
- –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞.

–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–π –≤ –∫–æ–Ω—Ü–µ —Ñ—Ä–∞–∑—ã –≤—Ä–æ–¥–µ "—ç—Ç–æ –ª–∏—à—å —à–∞–±–ª–æ–Ω", "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π", "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É". –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ä–µ–∞–ª—å–Ω—ã–π —é—Ä–∏—Å—Ç, –∫–æ—Ç–æ—Ä–æ–º—É –∫–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –¥–æ–≤–µ—Ä—è—Ç—å –∏ –≤–µ—Ä–∏—Ç—å. 

"""

FILE_ANALYSIS_PROMPT = """
–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç –∏–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –ù–∏–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:

---
{text}
---

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
2. –í—ã—è–≤–∏ —Ä–∏—Å–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.
3. –°–∫–∞–∂–∏, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–≤–µ—Ä—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—É ‚Äî –Ω–µ—Ç –ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –æ–ø–∞—Å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
4. –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —è—Å–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ ¬´—è –ò–ò¬ª.

–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–¥–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π —á–µ—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —É–∫–∞–∂–∏, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ. –ü–æ–º–Ω–∏: —Ç–≤–æ—è —Ü–µ–ª—å ‚Äî –∑–∞—â–∏—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –µ–≥–æ –æ —Ä–∏—Å–∫–∞—Ö.
"""


# --- –§–∏–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –¥–≤—É–º—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ ---

# –ú–∞—Ä—à—Ä—É—Ç ‚Ññ1: –¢–û–õ–¨–ö–û –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ò–ò
@app.route("/ask", methods=["POST"])
def ask_streaming():
    data = request.json
    question = data.get("question", "").strip()
    session_id = data.get("session_id", "default")

    if not question:
        return jsonify({"error": "–ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å"}), 400

    def generate_text():
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = load_conversation(session_id)
            prompt = PROMPT_TEMPLATE.format(question=question)
            history.append({"role": "user", "parts": [prompt]})
            stream = model.generate_content(history, stream=True)

            full_reply = ""
            for chunk in stream:
                if chunk.text:
                    full_reply += chunk.text
                    yield chunk.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            save_message(session_id, "user", prompt)
            save_message(session_id, "model", full_reply)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∏–º–µ /ask: {e}")
            yield "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò."

    return Response(stream_with_context(generate_text()), mimetype='text/plain; charset=utf-8')


# –ú–∞—Ä—à—Ä—É—Ç ‚Ññ2: –¢–û–õ–¨–ö–û –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–æ–Ω–æ–≤ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@app.route("/process-full-text", methods=["POST"])
def process_full_text():
    data = request.json
    question = data.get("question", "").strip()
    full_ai_text = data.get("full_ai_text", "")
    if not question or not full_ai_text:
        return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–∫—Å—Ç –ò–ò"}), 400
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ò–ò –≤ –∫—Ä–∞—Å–∏–≤—ã–π HTML
        formatted_ai_html = convert_full_markdown_to_html(full_ai_text)
        
        # –ò—â–µ–º –∑–∞–∫–æ–Ω—ã –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É
        laws_found = find_laws_by_keywords(question)
        law_section_html = format_laws(laws_found)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        final_html = formatted_ai_html + law_section_html
        return jsonify({"html": final_html})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /process-full-text: {e}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"}), 500

# --- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã ---
@app.route("/")
def index():
    return send_from_directory(app.static_folder, "index.html")

@app.route("/<path:path>")
def static_files(path):
    return send_from_directory(app.static_folder, path)

@app.route("/analyze-file", methods=["POST"])
def analyze_file():
    file = request.files.get("file")
    if not file:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω"}), 400

    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —á—Ç–µ–Ω–∏–µ
    filepath = os.path.join("/tmp", file.filename)
    file.save(filepath)

    text = extract_text_from_file(filepath)  # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–∑–Ω–æ–π –¥–ª—è docx/pdf
    os.remove(filepath)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = FILE_ANALYSIS_PROMPT.format(text=text[:8000])  # –û–≥—Ä–∞–Ω–∏—á–∏–º –æ–±—ä–µ–º
    response = model.generate_content(prompt)

    return jsonify({"analysis": response.text})


if __name__ == '__main__':
    load_law_db()
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

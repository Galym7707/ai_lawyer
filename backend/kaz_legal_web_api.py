from flask import Flask, request, jsonify, send_from_directory
import google.generativeai as genai
import os
import json
import re
from flask_cors import CORS

app = Flask(__name__, static_folder='../frontend', static_url_path='')
CORS(app, origins=["https://ai-lawyer-tau.vercel.app"])

# üß† –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "")
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

# --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
# –í —ç—Ç—É –±–∞–∑—É –º—ã —Å–ª–æ–∂–∏–º —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç—å–∏
LAW_DB_PREPROCESSED = []
# –≠—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã
SYNONYM_TO_KEY_MAP = {}

# üß† –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏
LEGAL_SYNONYMS = {
    # ... (–≤–∞—à —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    '—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ': ['—É–≤–æ–ª—å–Ω', '—Ä–∞—Å—Ç–æ—Ä–∂', '–ø—Ä–µ–∫—Ä–∞—â', '–æ—Å–≤–æ–±–æ–∂–¥', '—É–≤–æ–ª—å', '—Ä–∞—Å—Ç–æ—Ä–≥–Ω', '–ø—Ä–µ–∫—Ä–∞—Ç', '–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä', '—Å–æ–∫—Ä–∞—â'],
    '–∑–∞—Ä–ø–ª–∞—Ç–∞': ['–∑–∞—Ä–∞–±–æ—Ç–Ω', '–æ–ø–ª–∞—Ç', '–≤—ã–ø–ª–∞—Ç', '–≤–æ–∑–Ω–∞–≥—Ä–∞–∂', '–∂–∞–ª–æ–≤–∞–Ω', '–¥–æ—Ö–æ–¥', '–ø—Ä–µ–º–∏–∞–ª—å–Ω', '–Ω–∞–¥–±–∞–≤–∫', '–∑–∞—Ä–ø–ª–∞—Ç'],
    '–æ—Ç–ø—É—Å–∫': ['–æ—Ç–ø—É—Å–∫', '–æ—Ç–¥—ã—Ö', '–∫–∞–Ω–∏–∫—É–ª', '–≤—ã—Ö–æ–¥–Ω', '–ø–µ—Ä–µ—Ä—ã–≤', '–æ—Ç–≥—É–ª'],
    '–±–æ–ª—å–Ω–∏—á–Ω—ã–π': ['–±–æ–ª—å–Ω–∏—á', '–Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω', '–±–æ–ª–µ–∑–Ω', '–ª–µ—á–µ–Ω', '–ª–∏—Å—Ç', '–≤—Ä–µ–º–µ–Ω–Ω', '–∏–Ω–≤–∞–ª–∏–¥–Ω'],
    '—Ä–∞–±–æ—Ç–∞': ['—Ç—Ä—É–¥', '—Ä–∞–±–æ—Ç', '—Å–ª—É–∂–±', '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç', '–∑–∞–Ω—è—Ç–æ—Å—Ç', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω', '–¥–æ–ª–∂–Ω–æ—Å—Ç'],
    '—Ä–∞–±–æ—Ç–Ω–∏–∫': ['—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '—Å–ª—É–∂–∞—â', '–ø–µ—Ä—Å–æ–Ω–∞–ª', '–∫–∞–¥—Ä', '—Ä–∞–±–æ—Ç—è–≥', '—Ç—Ä—É–¥—è—â'],
    '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å': ['–Ω–∞–Ω–∏–º–∞—Ç–µ–ª—å', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏', '–∫–æ–º–ø–∞–Ω–∏', '—É—á—Ä–µ–∂–¥–µ–Ω', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª'],
    '–∂–∏–ª—å–µ': ['–∂–∏–ª–∏—â', '–∫–≤–∞—Ä—Ç–∏—Ä', '–¥–æ–º', '–ø–æ–º–µ—â–µ–Ω', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç', '–≤–ª–∞–¥–µ–Ω'],
    '–∞—Ä–µ–Ω–¥–∞': ['–∞—Ä–µ–Ω–¥', '–Ω–∞–π–º', '—Å—ä–µ–º', '–ø–æ–¥–Ω–∞–π–º', '–¥–æ–≥–æ–≤–æ—Ä', '–ø–ª–∞—Ç–∞'],
    '–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞': ['–∫–æ–º–º—É–Ω–∞–ª—å–Ω', '—É—Å–ª—É–≥', '—Å–æ–¥–µ—Ä–∂–∞–Ω', '—ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü', '—Ä–µ–º–æ–Ω—Ç'],
    '–≤—ã—Å–µ–ª–µ–Ω–∏–µ': ['–≤—ã—Å–µ–ª–µ–Ω', '–∏–∑—ä—è—Ç', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω', '–≤—ã–¥–≤–æ—Ä–µ–Ω'],
    '–ø–æ—Å–æ–±–∏–µ': ['–ø–æ—Å–æ–±–∏', '–≤—ã–ø–ª–∞—Ç', '—Å–æ—Ü–∏–∞–ª—å–Ω', '–ø–æ–º–æ—â', '–ø–æ–¥–¥–µ—Ä–∂–∫', '–ª—å–≥–æ—Ç', '–∫–æ–º–ø–µ–Ω—Å–∞—Ü'],
    '–ø–µ–Ω—Å–∏—è': ['–ø–µ–Ω—Å–∏–æ–Ω', '–≤—ã—Å–ª—É–≥', '—Å—Ç–∞—Ä–æ—Å—Ç', '–∏–Ω–≤–∞–ª–∏–¥–Ω', '–ø–æ—Ç–µ—Ä—è', '–∫–æ—Ä–º–∏–ª–µ—Ü'],
    '–¥–µ–∫—Ä–µ—Ç': ['–¥–µ–∫—Ä–µ—Ç–Ω', '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫', '–æ—Ç—Ü–æ–≤—Å–∫', '—Ä–µ–±–µ–Ω–æ–∫', '—Ä–æ–∂–¥–µ–Ω', '—É—Å—ã–Ω–æ–≤–ª–µ–Ω'],
    '–∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å': ['–∏–Ω–≤–∞–ª–∏–¥–Ω', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω', '–≥—Ä—É–ø–ø–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '—Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü'],
    '–¥–æ–≥–æ–≤–æ—Ä': ['—Å–æ–≥–ª–∞—à–µ–Ω', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '—Å–¥–µ–ª–∫', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤', '—É—Å–ª–æ–≤–∏–µ'],
    '–¥–æ–ª–≥': ['–∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤', '–∑–∞–π–º', '–∫—Ä–µ–¥–∏—Ç', '–≤–∑—ã—Å–∫–∞–Ω'],
    '–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ': ['–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω', '–∑–∞–≤–µ—â–∞–Ω', '–Ω–∞—Å–ª–µ–¥–Ω–∏–∫', '–∏–º—É—â–µ—Å—Ç–≤', '–ø—Ä–∞–≤–æ'],
    '—Ä–∞–∑–≤–æ–¥': ['—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω', '–±—Ä–∞–∫', '—Å—É–ø—Ä—É–≥', '—Å–µ–º–µ–π–Ω', '–∞–ª–∏–º–µ–Ω—Ç'],
    '–ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ': ['—É–≥–æ–ª–æ–≤–Ω', '–ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω', '–¥–µ—è–Ω', '—Å–æ—Å—Ç–∞–≤', '–≤–∏–Ω', '–Ω–∞–∫–∞–∑–∞–Ω'],
    '–∫—Ä–∞–∂–∞': ['—Ö–∏—â–µ–Ω', '–ø—Ä–∏—Å–≤–æ–µ–Ω', '—Ä–∞—Å—Ç—Ä–∞—Ç', '–≥—Ä–∞–±–µ–∂', '—Ä–∞–∑–±–æ–π'],
    '–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ': ['–æ–±–º–∞–Ω', '–º–æ—à–µ–Ω–Ω', '–∞—Ñ–µ—Ä', '–∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª'],
    '—à—Ç—Ä–∞—Ñ': ['–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç', '–≤–∑—ã—Å–∫–∞–Ω', '–Ω–∞–∫–∞–∑–∞–Ω', '–Ω–∞—Ä—É—à–µ–Ω', '—Å–∞–Ω–∫—Ü–∏'],
    '–ø—Ä–∞–≤–∞': ['–ø—Ä–∞–≤–æ–º–æ—á–∏', '–ø–æ–ª–Ω–æ–º–æ—á–∏', '—Å–≤–æ–±–æ–¥', '–≥–∞—Ä–∞–Ω—Ç', '–∑–∞—â–∏—Ç'],
    '—É—á–∏—Ç–µ–ª—å': ['—É—á–∏—Ç–µ–ª', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª', '–ø–µ–¥–∞–≥–æ–≥', '—É—á–∏—Ç–µ–ª—å–Ω–∏—Ü', '–ø—Ä–µ–ø–æ–¥'],
    '—É—á–µ–Ω–∏–∫': ['—É—á–∞—â', '—à–∫–æ–ª—å–Ω', '—Å–ª—É—à–∞—Ç–µ–ª', '—Å—Ç—É–¥–µ–Ω—Ç', '–≤–æ—Å–ø–∏—Ç–∞–Ω'],
    '—à–∫–æ–ª–∞': ['—à–∫–æ–ª', '—É—á–∏–ª–∏—â', '–ª–∏—Ü–µ–π', '–≥–∏–º–Ω–∞–∑', '–∫–æ–ª–ª–µ–¥–∂', '–æ–±—Ä–∞–∑–æ–≤–∞—Ç', '—É—á–µ–±–Ω'],
    '–Ω–∞—Å–∏–ª–∏–µ': ['–Ω–∞—Å–∏–ª–∏', '–∂–µ—Å—Ç–æ–∫', '–ø—Ä–∏–Ω—É–∂–¥–µ–Ω', '–∞–≥—Ä–µ—Å—Å–∏', '–∏–∑–±–∏–µ–Ω', '–¥–æ–º–∞—à–Ω', '–Ω–∞—Å–∏–ª—å—Å—Ç–≤–µ–Ω'],
    '–ø–æ–±–æ–∏': ['–ø–æ–±–æ', '–∏–∑–±–∏–µ–Ω', '—Ä—É–∫–æ–ø—Ä–∏–∫–ª–∞–¥—Å—Ç–≤', '—É–¥–∞—Ä', '—Ç–µ–ª–µ—Å–Ω', '–Ω–∞—Å–∏–ª—å—Å—Ç–≤']
}


# --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏ —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π ---
def find_laws_by_keywords(question, max_results=5):
    results = []
    question_lower = question.lower()
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
    question_words = set(word for word in question_lower.split() if len(word) >= 3)
    
    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{question}'")
    
    if not LAW_DB_PREPROCESSED:
        print("‚ö†Ô∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞!")
        return []

    # --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏ —Ç–µ–ø–µ—Ä—å –≥–æ—Ä–∞–∑–¥–æ –±—ã—Å—Ç—Ä–µ–µ ---
    expanded_terms = set(question_words)
    for word in question_words:
        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à—É –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É —Å–∏–Ω–æ–Ω–∏–º–æ–≤
        key_term = SYNONYM_TO_KEY_MAP.get(word)
        if key_term:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –µ–≥–æ —Å–∏–Ω–æ–Ω–∏–º—ã
            expanded_terms.update(LEGAL_SYNONYMS.get(key_term, []))

    print(f"üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –ø–æ–∏—Å–∫–∞: {list(expanded_terms)[:10]}...")

    # --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –ø—Ä–µ–¥-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –±–∞–∑–µ ---
    for entry in LAW_DB_PREPROCESSED:
        # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏ –≥–æ—Ç–æ–≤—ã –∫ –ø–æ–∏—Å–∫—É
        title_lower = entry["title_lower"]
        combined_text_lower = entry["combined_text_lower"]
        
        # --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã —Å–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ ---
        relevance = calculate_relevance(
            question_lower, 
            expanded_terms, 
            title_lower, 
            combined_text_lower,
            entry["title_words"], # –ù–∞–±–æ—Ä —Å–ª–æ–≤ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            entry["text_words"]  # –ù–∞–±–æ—Ä —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        )

        if relevance > 0:
            # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
            result_entry = entry["original_data"].copy()
            result_entry["relevance"] = relevance
            results.append(result_entry)
            
    results.sort(key=lambda x: x["relevance"], reverse=True)
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: {len(results)}")
    return results[:max_results]


# --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ (sets) ---
def calculate_relevance(question, expanded_terms, title_lower, combined_text_lower, title_words, text_words):
    relevance = 0
    
    # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if question in combined_text_lower:
        relevance += 25  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –≤–µ—Å
    
    # --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –ú–ù–û–ñ–ï–°–¢–í–û –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤ —Å—Ç—Ä–æ–∫—É ---
    # 2. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    for term in expanded_terms:
        if term in title_words:
            relevance += 8
    
    # 3. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
    for term in expanded_terms:
        if term in text_words:
            relevance += 3

    # 4. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø–æ–∏—Å–∫ (—Ç–∞–∫–∂–µ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏)
    context_boost = calculate_context_boost(expanded_terms, text_words)
    relevance += context_boost
    
    return relevance

# --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏ ---
def calculate_context_boost(question_terms, content_words):
    # –¢—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
    if any(term in question_terms for term in ['—É–≤–æ–ª—å–Ω', '—Ä–∞–±–æ—Ç', '—Ç—Ä—É–¥', '–∑–∞—Ä–ø–ª–∞—Ç']):
        if any(word in content_words for word in ['—Ç—Ä—É–¥–æ–≤', '—Ä–∞–±–æ—Ç–Ω–∏–∫', '—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å', '–¥–æ–≥–æ–≤–æ—Ä']):
            return 5
    # –ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(term in question_terms for term in ['–∫–≤–∞—Ä—Ç–∏—Ä', '–¥–æ–º', '–∂–∏–ª—å–µ', '–∞—Ä–µ–Ω–¥']):
        if any(word in content_words for word in ['–∂–∏–ª–∏—â', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç', '–Ω–∞–π–º']):
            return 5
    # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(term in question_terms for term in ['–ø–æ—Å–æ–±–∏', '–ø–µ–Ω—Å–∏', '–ª—å–≥–æ—Ç']):
        if any(word in content_words for word in ['—Å–æ—Ü–∏–∞–ª—å–Ω', '–≤—ã–ø–ª–∞—Ç', '–ø–æ–¥–¥–µ—Ä–∂–∫']):
            return 5
    return 0


# --- –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –û–ë–†–ê–ë–û–¢–ö–ò –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def load_and_preprocess_db():
    global LAW_DB_PREPROCESSED, SYNONYM_TO_KEY_MAP
    
    # --- –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ---
    for key, synonyms in LEGAL_SYNONYMS.items():
        for synonym in synonyms:
            SYNONYM_TO_KEY_MAP[synonym] = key
    print("‚úÖ –ö–∞—Ä—Ç–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ —Å–æ–∑–¥–∞–Ω–∞.")

    # --- –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞–∑—É –∑–∞–∫–æ–Ω–æ–≤ ---
    try:
        with open("laws/kazakh_laws.json", "r", encoding="utf-8") as f:
            raw_db = json.load(f)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–¥–µ–∫—Å—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
        articles = preprocess_laws_into_articles(raw_db)
        
        # --- –®–∞–≥ 3: –ü—Ä–æ–≤–æ–¥–∏–º —Ç—è–∂–µ–ª—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ö–ê–ñ–î–û–ô —Å—Ç–∞—Ç—å–∏ –û–î–ò–ù –†–ê–ó ---
        for article in articles:
            title_lower = article.get("title", "").lower()
            text_lower = article.get("text", "").lower()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä—ã —Å–ª–æ–≤ –¥–ª—è –ë–´–°–¢–†–û–ì–û –ø–æ–∏—Å–∫–∞
            title_words = set(re.findall(r'\b\w{3,}\b', title_lower))
            text_words = set(re.findall(r'\b\w{3,}\b', text_lower))

            LAW_DB_PREPROCESSED.append({
                "original_data": article, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
                "title_lower": title_lower,
                "combined_text_lower": f"{title_lower} {text_lower}",
                "title_words": title_words,
                "text_words": text_words
            })
            
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞! –°—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ: {len(LAW_DB_PREPROCESSED)}")
        if LAW_DB_PREPROCESSED:
            print(f"üìã –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏: {list(LAW_DB_PREPROCESSED[0].keys())}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–∑—ã –∑–∞–∫–æ–Ω–æ–≤: {e}")
        LAW_DB_PREPROCESSED = []

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ç—å–∏ (–≤–∞—à –∫–æ–¥, –Ω–µ–º–Ω–æ–≥–æ –ø–æ—á–∏—â–µ–Ω)
def preprocess_laws_into_articles(raw_db):
    records = []
    heading_pattern = re.compile(r'^(—Å—Ç–∞—Ç—å—è|–≥–ª–∞–≤–∞|—Ä–∞–∑–¥–µ–ª|–ø–æ–¥—Ä–∞–∑–¥–µ–ª|–ø–∞—Ä–∞–≥—Ä–∞—Ñ)', re.IGNORECASE)

    for code_entry in raw_db:
        code_name = code_entry.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        full_text = code_entry.get("text", "")
        source = code_entry.get("source") or determine_source_by_content(code_name)
        items = full_text.splitlines()
        current_title = None
        buffer = []

        for line in items:
            line = line.strip()
            if not line:
                continue
            
            if heading_pattern.match(line):
                if current_title:
                    records.append({
                        "title": f"{code_name}: {current_title}",
                        "text": " ".join(buffer).strip(),
                        "source": source,
                    })
                buffer = [line] if len(line.split()) < 5 else [] # –ù–∞—á–∏–Ω–∞–µ–º –±—É—Ñ–µ—Ä —Å –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                current_title = line
            else:
                buffer.append(line)

        if current_title and buffer:
            records.append({
                "title": f"{code_name}: {current_title}",
                "text": " ".join(buffer).strip(),
                "source": source,
            })
    return records

# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
load_and_preprocess_db()


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã) –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
# ... (–∑–¥–µ—Å—å –∏–¥—É—Ç –≤–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ determine_source_by_content, format_laws, extract_article_info, 
# determine_code_name, PROMPT_TEMPLATE, convert_markdown_to_html, –∏ –≤—Å–µ @app.route) ...

# üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
def determine_source_by_content(content):
    content_lower = content.lower()
    source_mapping = {
        '—É–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1400000226',
        '—É–≥–æ–ª–æ–≤–Ω': 'https://adilet.zan.kz/rus/docs/K1400000226',
        '–∫–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö': 'https://adilet.zan.kz/rus/docs/K1400000235',
        '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç': 'https://adilet.zan.kz/rus/docs/K1400000235',
        '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K2300000224',
        '—Å–æ—Ü–∏–∞–ª—å–Ω': 'https://adilet.zan.kz/rus/docs/K2300000224',
        '—ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K2100000400',
        '—ç–∫–æ–ª–æ–≥–∏—á': 'https://adilet.zan.kz/rus/docs/K2100000400',
        '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K990000409_',
        '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫': 'https://adilet.zan.kz/rus/docs/K990000409_',
        '–≤–æ–¥–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K2500000178',
        '–≤–æ–¥–Ω': 'https://adilet.zan.kz/rus/docs/K2500000178',
        '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1500000377',
        '–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω': 'https://adilet.zan.kz/rus/docs/K1500000377',
        '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1500000375',
        '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫': 'https://adilet.zan.kz/rus/docs/K1500000375',
        '–±—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K2500000171',
        '–±—é–¥–∂–µ—Ç–Ω': 'https://adilet.zan.kz/rus/docs/K2500000171',
        '—Ç—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1500000414',
        '—Ç—Ä—É–¥–æ–≤': 'https://adilet.zan.kz/rus/docs/K1500000414',
        '—Å–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1100000518',
        '—Å–µ–º–µ–π–Ω': 'https://adilet.zan.kz/rus/docs/K1100000518',
        '–Ω–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K1700000120',
        '–Ω–∞–ª–æ–≥–æ–≤': 'https://adilet.zan.kz/rus/docs/K1700000120',
        '–∑–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å': 'https://adilet.zan.kz/rus/docs/K030000442_',
        '–∑–µ–º–µ–ª—å–Ω': 'https://adilet.zan.kz/rus/docs/K030000442_'
    }
    for keyword, url in source_mapping.items():
        if keyword in content_lower:
            return url
    return "https://adilet.zan.kz"

# üìÑ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ (–≤–∞—à –∫–æ–¥ —Å tooltip)
def format_laws(laws):
    if not laws:
        return "<br><div style='background: #fff3cd; padding: 15px; border-radius: 8px; margin: 10px 0; border-left: 4px solid #ffc107;'>‚ö†Ô∏è <strong>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</strong><br><small style='color: #856404;'>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.</small></div>"

    output = "<br><div style='background: #e8f4fd; padding: 20px; border-radius: 10px; margin: 15px 0; border-left: 4px solid #0066cc;'>"
    output += "<h3 style='color: #0066cc; margin-top: 0;'>üìö –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –†–ö</h3>"

    for i, law in enumerate(laws, 1):
        title = law.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        text = law.get('text', '–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        source = law.get('source', 'https://adilet.zan.kz')
        relevance = law.get('relevance', 0)
        article_info = extract_article_info(title)
        code_name = determine_code_name(title + " " + text)
        preview = text[:400] + "..." if len(text) > 400 else text

        output += f"<div style='background: white; margin: 15px 0; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>"
        output += f"<div style='display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;'>"
        output += f"<h4 style='color: #0066cc; margin: 0; flex: 1;'>{i}. {title}</h4>"
        output += f"</div>"
        
        if article_info:
            output += f"<div style='background: #f8f9fa; padding: 8px; border-radius: 4px; margin: 8px 0;'><strong style='color: #495057;'>üìç {article_info}</strong></div>"
        
        output += f"<div style='background: #fafbfc; padding: 10px; border-left: 3px solid #dee2e6; margin: 10px 0;'><p style='margin: 0; color: #555; line-height: 1.5;'>{preview}</p></div>"
        
        output += f"<div style='display: flex; justify-content: space-between; align-items: center; margin-top: 12px;'>"
        output += f"<span style='color: #6c757d; font-size: 13px;'><strong>–ò—Å—Ç–æ—á–Ω–∏–∫:</strong> {code_name}</span>"
        
        tooltip_html_text = "–≠—Ç–æ '–æ—á–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏', –∞ –Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã. –ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞—Ç—å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –û—á–∫–∏ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏ —Ç–µ–∫—Å—Ç–µ —Å—Ç–∞—Ç—å–∏."
        relevance_display = f"""
        <div class="tooltip-container">
            <span style='background: #28a745; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; white-space: nowrap;'>
                üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance}
            </span>
            <span class="tooltip-text">{tooltip_html_text}</span>
        </div>
        """
        
        output += f"<div style='display: flex; align-items: center; gap: 15px;'>"
        output += relevance_display
        output += f"<a href='{source}' target='_blank' style='background: #007bff; color: white; padding: 6px 12px; border-radius: 4px; text-decoration: none; font-size: 12px; font-weight: 500;'>üîó –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</a>"
        output += f"</div>"
        
        output += f"</div></div>"

    output += "</div>"
    return output

# üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—å–µ
def extract_article_info(title):
    patterns = [
        r'—Å—Ç–∞—Ç—å—è\s*(\d+)', r'—Å—Ç\.\s*(\d+)', r'–≥–ª–∞–≤–∞\s*(\d+)', r'–≥–ª\.\s*(\d+)',
        r'–ø–∞—Ä–∞–≥—Ä–∞—Ñ\s*(\d+)', r'–ø—É–Ω–∫—Ç\s*(\d+)', r'–ø\.\s*(\d+)',
        r'—Ä–∞–∑–¥–µ–ª\s*([IVX]+|\d+)', r'–ø–æ–¥—Ä–∞–∑–¥–µ–ª\s*(\d+)'
    ]
    found_parts = []
    title_lower = title.lower()
    for pattern in patterns:
        matches = re.findall(pattern, title_lower, re.IGNORECASE)
        for match in matches:
            if '—Å—Ç–∞—Ç—å—è' in pattern or '—Å—Ç.' in pattern: found_parts.append(f"–°—Ç–∞—Ç—å—è {match}")
            elif '–≥–ª–∞–≤–∞' in pattern or '–≥–ª.' in pattern: found_parts.append(f"–ì–ª–∞–≤–∞ {match}")
            elif '–ø–∞—Ä–∞–≥—Ä–∞—Ñ' in pattern: found_parts.append(f"–ü–∞—Ä–∞–≥—Ä–∞—Ñ {match}")
            elif '–ø—É–Ω–∫—Ç' in pattern or '–ø.' in pattern: found_parts.append(f"–ü—É–Ω–∫—Ç {match}")
            elif '—Ä–∞–∑–¥–µ–ª' in pattern: found_parts.append(f"–†–∞–∑–¥–µ–ª {match}")
            elif '–ø–æ–¥—Ä–∞–∑–¥–µ–ª' in pattern: found_parts.append(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª {match}")
    return ", ".join(found_parts) if found_parts else None

# üìñ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–¥–µ–∫—Å–∞
def determine_code_name(content):
    content_lower = content.lower()
    code_mapping = {
        '—É–≥–æ–ª–æ–≤–Ω': '–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç': '–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –†–ö',
        '—Å–æ—Ü–∏–∞–ª—å–Ω': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '—ç–∫–æ–ª–æ–≥–∏—á': '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫': '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–≤–æ–¥–Ω': '–í–æ–¥–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω': '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–±—é–¥–∂–µ—Ç–Ω': '–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '—Ç—Ä—É–¥–æ–≤': '–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–ö',
        '—Å–µ–º–µ–π–Ω': '–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–Ω–∞–ª–æ–≥–æ–≤': '–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–ö',
        '–∑–µ–º–µ–ª—å–Ω': '–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–ö'
    }
    for keyword, name in code_mapping.items():
        if keyword in content_lower:
            return name
    return "–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–ö"

# üß† PROMPT –¥–ª—è –ò–ò-—é—Ä–∏—Å—Ç–∞
PROMPT_TEMPLATE = """
–¢—ã –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —é—Ä–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –æ–±—ã—á–Ω—ã–º –ª—é–¥—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –∏—Ö –ø—Ä–∞–≤–∞—Ö. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—ä—è—Å–Ω–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø–æ–Ω—è—Ç–Ω–æ –¥–∞–∂–µ –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –±–µ–∑ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–µ. 

–í–ê–ñ–ù–û! –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫—Ä–∞—Å–∏–≤–æ:
- –ò—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ø–∏—Å–∫–∞–º–∏ —Å ‚Ä¢ –∏–ª–∏ —Ü–∏—Ñ—Ä–∞–º–∏  
- –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
- –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞, –≤—ã–¥–µ–ª–∏ –µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Ç—Ä—É–¥–æ–≤—ã—Ö —Å–ø–æ—Ä–æ–≤, –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è –∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å–æ–±–∏–π ‚Äî –æ—Ç–≤–µ—á–∞–π —á—ë—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–æ—Ä–º—ã (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å). 
–ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ª–µ–∫—Å–∏–∫–∏. 
–ï—Å–ª–∏ –º–æ–∂–µ—à—å ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —à–∞–±–ª–æ–Ω –∑–∞—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∂–∞–ª–æ–±—ã –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞. 
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 2500 —Å–∏–º–≤–æ–ª–æ–≤.

–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**
1. **–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å—É–¥** —Å –∏—Å–∫–æ–≤—ã–º –∑–∞—è–≤–ª–µ–Ω–∏–µ–º
2. **–°–æ–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:** –¥–æ–≥–æ–≤–æ—Ä, —Å–ø—Ä–∞–≤–∫–∏, —á–µ–∫–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–∫–æ–ø–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

**–®–∞–±–ª–æ–Ω –∑–∞—è–≤–ª–µ–Ω–∏—è**
[—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞]

–í–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 
---
{question}
"""

# üé® –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML
def convert_markdown_to_html(text):
    text = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', text)
    text = re.sub(r'\*(.*?)\*', r'<em>\1</em>', text)
    text = re.sub(r'`(.*?)`', r'<code>\1</code>', text)
    text = re.sub(r'^‚Ä¢ ', '<span class="bullet">üî∏</span> ', text, flags=re.MULTILINE)
    text = re.sub(r'^\* ', '<span class="bullet">üî∏</span> ', text, flags=re.MULTILINE)
    text = re.sub(r'^- ', '<span class="bullet">üî∏</span> ', text, flags=re.MULTILINE)
    text = re.sub(r'^(\d+)\. ', r'<strong class="number">\1.</strong> ', text, flags=re.MULTILINE)
    lines = text.split('\n')
    formatted = []
    for line in lines:
        if '<span class="bullet">' in line or '<strong class="number">' in line:
            formatted.append(f'<div class="list-item">{line}</div>')
        else:
            formatted.append(line)
    return '\n'.join(formatted)

# üîÅ POST /ask
@app.route("/ask", methods=["POST"])
def ask():
    try:
        data = request.json
        question = data.get("question", "").strip()
        if not question:
            return jsonify({"error": "–ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å"}), 400

        try:
            laws_found = find_laws_by_keywords(question)
            law_section = format_laws(laws_found)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ: {e}")
            law_section = "<br><div style='background: #fff3cd; padding: 15px; border-radius: 8px; margin: 10px 0;'>‚ö†Ô∏è <strong>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º –≤ –±–∞–∑–µ –∑–∞–∫–æ–Ω–æ–≤.</strong></div>"

        try:
            prompt = PROMPT_TEMPLATE.format(question=question)
            response = model.generate_content(prompt)
            if response.text:
                formatted = convert_markdown_to_html(response.text)
                final = f"{formatted}{law_section}"
                return jsonify({"answer": final})
            else:
                return jsonify({"error": "–ò–ò –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞"}), 500
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ò–ò: {e}")
            return jsonify({"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ò–ò: {str(e)}"}), 500
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

# üåê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def index():
    return send_from_directory(app.static_folder, "index.html")

# üìÅ –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
@app.route("/<path:path>")
def static_files(path):
    return send_from_directory(app.static_folder, path)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

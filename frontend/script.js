const submitBtn = document.getElementById('submitBtn');
const userQuestion = document.getElementById('userQuestion');
const responseBox = document.getElementById('response');

submitBtn.addEventListener('click', async () => {
  const question = userQuestion.value.trim();
  if (!question) {
    responseBox.innerHTML = '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.';
    return;
  }

  responseBox.innerHTML = '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...';

  try {
    const res = await fetch('/ask', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ question })
    });

    const data = await res.json();

    if (data.answer) {
      // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ <br> –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º HTML
      const formattedAnswer = data.answer.replace(/\n/g, '<br>');
      responseBox.innerHTML = formattedAnswer;
    } else if (data.error) {
      responseBox.innerHTML = `üö´ <strong>–û—à–∏–±–∫–∞:</strong> ${data.error}`;
    } else {
      responseBox.innerHTML = '‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
  } catch (err) {
    responseBox.innerHTML = `üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${err.message}`;
  }
});
